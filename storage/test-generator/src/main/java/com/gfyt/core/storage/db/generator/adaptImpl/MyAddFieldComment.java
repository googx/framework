package com.gfyt.core.storage.db.generator.adaptImpl;

import com.gfyt.core.storage.db.generator.adaptInterface.AlterFieldComment;
import com.gfyt.core.storage.db.generator.adaptInterface.CustomCommentGenerator;
import org.mybatis.generator.api.IntrospectedColumn;
import org.mybatis.generator.api.IntrospectedTable;
import org.mybatis.generator.api.dom.java.Field;
import org.mybatis.generator.internal.util.StringUtility;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import java.util.*;

/**
 * <b>功能说明:</b><p>
 * 一些说明写这里
 * </p></br> <b>设计思想、目的:</b><p>
 * 一些说明写这里
 * </p></br><b>设计缺陷: </b>
 * <p>
 * 一些说明写这里
 * </p>
 *
 * @author hanxu
 * @version 1.0
 * @CreateDate 2018-09-28 下午5:21
 * @encode UTF-8
 * @needThreadSave false
 * @webSite <a href="https://www.thesunboy.com">访问开发者个人主页</a>
 * @QQ:940274999
 */
public class MyAddFieldComment implements AlterFieldComment
{
	private final Logger logger = LoggerFactory.getLogger(MyAddFieldComment.class);

	CustomCommentGenerator commentGenerator;
	Properties properties;

	protected boolean suppressAllComments, addRemarkComments;
	protected boolean isSupportforceBLOB;

	public MyAddFieldComment(CustomCommentGenerator commentGenerator)
	{
		this.commentGenerator = commentGenerator;
	}

	@Override
	public void addFieldComment(Field field, IntrospectedTable introspectedTable)
	{
		if(suppressAllComments)
		{
			return;
		}

		StringBuilder sb = new StringBuilder();

		field.addJavaDocLine("/**"); //$NON-NLS-1$
		field.addJavaDocLine(" * This field was generated by MyBatis Generator."); //$NON-NLS-1$

		sb.append(" * This field corresponds to the database table "); //$NON-NLS-1$
		sb.append(introspectedTable.getFullyQualifiedTable());
		field.addJavaDocLine(sb.toString());

		commentGenerator.addJavadocTag(field, false);

		field.addJavaDocLine(" */"); //$NON-NLS-1$
	}

	@Override
	public void addFieldComment(Field field, IntrospectedTable introspectedTable, IntrospectedColumn introspectedColumn)
	{
		if(suppressAllComments)
		{
			return;
		}

		field.addJavaDocLine("/**"); //$NON-NLS-1$

		String remarks = introspectedColumn.getRemarks();

		String jdbcTypeName = introspectedColumn.getJdbcTypeName();
		String defaultValue = introspectedColumn.getDefaultValue();

		{
			//数据库字段的长度
			int length = introspectedColumn.getLength();
			boolean nullable = introspectedColumn.isNullable();
			List<String> annotations = new ArrayList<>();

			addCommentInfo(!nullable, annotations, "@" + NotNull.class.getSimpleName());

			addCommentInfo(length != 0, annotations, "@" + Size.class.getSimpleName() + "(max = " + length + ")");

			for (String item : annotations)
			{
				//				兼容jdk1.8以下环境
				field.addAnnotation(item);
			}
			annotations.clear();
			annotations = null;
		}

		if(addRemarkComments && StringUtility.stringHasValue(remarks))
		{
			//			field.addJavaDocLine(" * Database Column Remarks:"); //$NON-NLS-1$
			String property = System.getProperty("line.separator");
			//			property是个\n回车符,不同系统不一样,win是\r\n
			String[] remarkLines = remarks.split(property);  //$NON-NLS-1$
			for (String remarkLine : remarkLines)
			{
				field.addJavaDocLine(" *   " + remarkLine);  //$NON-NLS-1$
			}
		}
		//		field.addJavaDocLine(" *");
		//		StringBuilder sb = new StringBuilder();
		//		sb.append("");
		//		sb.append("this column is not allow edit. by gfyt.hanxu");
		//		field.addJavaDocLine(sb.toString());

		//
		//		commentGenerator.addJavadocTag(field, false);
		commentGenerator.addJavadocTag(field, introspectedTable, introspectedColumn, false);
		field.addJavaDocLine(" */"); //$NON-NLS-1$
	}

	private void addCommentInfo(boolean codition, List<String> data, String value)
	{
		if(codition)
		{
			data.add(value);
		}
	}

	@Override
	public void addConfigurationProperties(Properties properties)
	{
		this.properties = properties;
		this.suppressAllComments = StringUtility.isTrue(properties.getProperty("suppressAllComments"));
		this.isSupportforceBLOB = StringUtility.isTrue(properties.getProperty("isSupportforceBLOB", "false"));
		this.addRemarkComments = StringUtility.isTrue(properties.getProperty("addRemarkComments"));
	}
}
